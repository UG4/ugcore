default:
  tags:
    - docker
    - linux

services:
  - docker:dind

variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_DIR/$CI_PIPELINE_ID/ug4/ugcore
    #UG_PACKAGES_TO_INSTALL: "ugcore adaptive_mg_tests conv_diff_app d3f_app tests electromagnetism_app unit_tests"

stages:
  - test
  - build

# TEST ug4
do-test:
  stage: test
  image: rigby132/ug4-test:latest
  timeout: 16 hours
  variables:
    CMAKE_C_COMPILER: "gcc"
    CMAKE_CXX_COMPILER: "g++"
    #CXX_FLAGS: "-fPIC"
  script:
    # copy ug4 without overwriting existing files (ugcore)
    - cd ..
    - cp --update=none -R /opt/ug4/. .
    # build ug in debug
    - mkdir -p build
    - cd build
    - cmake .. -DENABLE_ALL_PLUGINS=ON -DDEBUG=ON -GNinja
    - ninja -j8
    - cd ..
    # build testsuite
    - cd apps/unit_tests/
    - mkdir -p build
    - cd build
    - cmake .. -DUSE_JSON=OFF -DINTERNAL_BOOST=ON -DDEBUG=ON -GNinja
    - ninja -j8
    - cd ../../..
    - pwd
    - ls -a
    - source ugcore/scripts/shell/ugbash
    - echo $UG4_ROOT
    - ./bin/testsuite --build-info=yes --log_level=all --log_format=JUNIT --log_sink=report.xml -- --name report
    - mv ug_test_numprocs_1.log ugcore/test.log
    - mv report.xml ugcore/report.xml
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - report.xml
      - test.log
    reports:
      junit: report.xml
      #coverage_report:
      #  coverage_format: cobertura
      #  path: coverage_reports/${CI_COMMIT_SHORT_SHA}.xml
  #cache:
  #  policy: pull-push
  #  unprotect: false
  #  untracked: false
  #  when: on_success
  #  paths:
  #    - "ug4/build"
  #    - "ug4/apps/unit_tests/build"
  #    - "ughub"

# BUILD sources on various platforms and compilers
build-clang:
  stage: build
  image: rigby132/ug4-minimal:latest
  timeout: 16 hours
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    CMAKE_C_COMPILER: "gcc"
    CMAKE_CXX_COMPILER: "g++"
    CXX_FLAGS: "-O3 -fPIC"
  before_script:
    - docker info
    - echo "$CI_REGISTRY"
    - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  script:
    # copy ug4 without overwriting existing files (ugcore)
    - cd ..
    - cp --update=none -R /opt/ug4/. .
    # build ug
    - mkdir -p build
    - cd build
    - cmake .. -DENABLE_ALL_PLUGINS=ON -DDEBUG=OFF -GNinja
    - ninja -j8
    - cd ..
    # build docker image
    - cd ..
    - echo -e 'FROM ubuntu:latest\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install -y python3 \nADD ug4 /opt/ug4' > Dockerfile
    - docker build -t registry.gitlab.com/ug4-project/ugcore .
    - docker push registry.gitlab.com/ug4-project/ugcore
    # move artifacts to clone dir
    - cd ug4
    - ls -a bin
    - mv bin ugcore/bin
  artifacts:
    when: on_success
    expire_in: 1 week
    paths:
      - bin/*
      - bin/plugins/*
  #cache:
  #  policy: pull-push
  # unprotect: false
  # untracked: false
  # when: on_success
  # paths:
  #   - "ug4/build"
  #   - "ughub"
