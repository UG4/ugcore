
# TEST ug4
build-and-test:
  stage: test
  image: ubuntu:24.04
  timeout: 4 hours
  parallel:
    matrix:
      - UG_BUILD_ID: cover-gcc-13
        UG_C_COMPILER: "gcc"
        UG_CXX_COMPILER: "g++"
        UG_WITH_CODE_COVERAGE: "GCOV"
      - UG_BUILD_ID: build-gcc-13
        UG_C_COMPILER: "gcc"
        UG_CXX_COMPILER: "g++"
        UG_WITH_CODE_COVERAGE: "NONE"
      - UG_BUILD_ID: build-clang-15
        UG_C_COMPILER: "clang-15"
        UG_CXX_COMPILER: "clang++-15"
        UG_WITH_CODE_COVERAGE: "NONE"
  #tags:
  #  - ${PROVIDER}-${STACK}
  #environment: $PROVIDER/$STACK
  variables:
    UGHUB_DIR: "$CI_PROJECT_DIR/ughub"
    UG4_OLD_DIR: "$CI_PROJECT_DIR/ug4-old"
    UG4_NEW_DIR: "$CI_PROJECT_DIR/ug4-new"
    UG_LCOV_FILE: "coverage.info"
  before_script:
    - echo "Setting up base ug4 enviroment."
    - mkdir -p $UG4_NEW_DIR/ugcore
    - mv * $UG4_NEW_DIR/ugcore || true
    - apt-get update >/dev/null && apt-get install -y python3 git cmake build-essential clang-15 >/dev/null
    - if [[ "$UG_WITH_CODE_COVERAGE" == "GCOV" ]]; then apt-get update && apt-get install -y lcov gcovr; fi
    - cd $CI_PROJECT_DIR && git clone https://gitlab.com/ug4-project/ughub.git
    - export PATH="$PATH:$UGHUB_DIR"
    - mkdir $UG4_OLD_DIR && cd $UG4_OLD_DIR
    - ughub init && ughub install ugcore ConvectionDiffusion
    - git clone https://gitlab.com/ug4-project/apps/unit_tests.git $UG4_OLD_DIR/apps/unit_tests
  script:
    - echo "Building and testing ug4"
    # copy ug4 except for ugcore
    - cd $CI_PROJECT_DIR
    - echo "$UG_BUILD_ID" > id.txt
    - cp --update=none -R $UG4_OLD_DIR/* $UG4_NEW_DIR
    # build ug4 in release
    - cd $UG4_NEW_DIR
    - mkdir -p $UG_BUILD_ID && cd $UG_BUILD_ID
    - cmake .. -DENABLE_ALL_PLUGINS=ON -DDEBUG=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=$UG_CXX_COMPILER -DCMAKE_C_COMPILER=$UG_C_COMPILER -DCODE_COVERAGE=$UG_WITH_CODE_COVERAGE
    - make -j 4
    # build testsuite
    - cd $UG4_NEW_DIR/apps/unit_tests
    - mkdir -p $UG_BUILD_ID && cd $UG_BUILD_ID
    - cmake .. -DUSE_JSON=OFF -DINTERNAL_BOOST=ON -DDEBUG=OFF -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=$UG_WITH_CODE_COVERAGE
    - make -j 4
    # run testsuite
    - cd $UG4_NEW_DIR
    - source ugcore/scripts/shell/ugbash
    - ./bin/testsuite --build-info=yes --log_level=all --log_format=JUNIT --log_sink=report.xml -- --name report
    - mv ug_test_numprocs_1.log test.log
    - |
      if [[ "$UG_WITH_CODE_COVERAGE" == "GCOV" ]]; then
        mkdir reports
        gcovr -r . --cobertura-pretty --exclude-unreachable-branches --print-summary -o reports/cobertura-coverage.xml
        gcovr -r . --html-details -o reports/cobertura-coverage.html
        lcov --capture --directory . --output-file $UG_LCOV_FILE --ignore-errors gcov,source,mismatch
        lcov --remove $UG_LCOV_FILE '/usr/*' --output-file $UG_LCOV_FILE --ignore-errors inconsistent
        lcov --remove $UG_LCOV_FILE '*/externals/BoostForUG4/*' --output-file $UG_LCOV_FILE --ignore-errors inconsistent
        lcov --remove $UG_LCOV_FILE '*/apps/unit_tests/src/*' --output-file $UG_LCOV_FILE --ignore-errors inconsistent
        lcov --list $UG_LCOV_FILE > reports/lcov.txt
        genhtml coverage.info --output-directory reports/html
        mv $UG_LCOV_FILE reports
      fi
  allow_failure: true # temporary
  artifacts:
    name: artifact-${UG_BUILD_ID}
    when: always
    expire_in: 1 week
    paths:
      # - $UG4_NEW_DIR/*
      - $UG4_NEW_DIR/report.xml
      - $UG4_NEW_DIR/test.log
      # - $UG4_NEW_DIR/lib/*
      - $UG4_NEW_DIR/bin/*
      - $UG4_NEW_DIR/bin/plugins/*
      - $UG4_NEW_DIR/reports/*
    reports:
      junit: $UG4_NEW_DIR/report.xml
      coverage_report:
        coverage_format: cobertura
        path: $UG4_NEW_DIR/reports/cobertura-coverage.xml




